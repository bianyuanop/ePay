type BlockIndex = nat64;
type Subaccount = blob;
// Number of nanoseconds since the UNIX epoch in UTC timezone.
type Timestamp = nat64;
// Number of nanoseconds between two [Timestamp]s.
type Duration = nat64;
type Tokens = nat64;

type Account = record {
    owner : principal;
    subaccount : opt Subaccount;
};

type TransferArg = record {
    from_subaccount : opt Subaccount;
    to_principal : principal;
    to_subaccount : opt Subaccount;
    amount : Tokens;
    fee : opt Tokens;
    created_at_time: opt Timestamp;
};

type TransferError = variant {
    BadFee : record { expected_fee : Tokens };
    BadBurn : record { min_burn_amount : Tokens };
    InsufficientFunds : record { balance : Tokens };
    TooOld : record { allowed_window_nanos : Duration };
    CreatedInFuture;
    Throttled;
    Duplicate : record { duplicate_of : BlockIndex };
    GenericError : record { error_code : nat64; message : text };
};

type TransferResult = variant {
    Ok : BlockIndex;
    Err : TransferError;
};

// The value returned from the [icrc1_metadata] endpoint.
type Value = variant {
    Nat : nat;
    Int : int;
    Text : text;
    Blob : blob;
};

// The initialization parameters of the Ledger
type InitArgs = record {
    minting_account : Account;
    transfer_fee : Tokens;
    token_symbol : text;
    token_name : text;
    metadata : vec record { text; Value };
    initial_balances : vec record { Account; Tokens };
    archive_options : record {
        num_blocks_to_archive : nat64;
        trigger_threshold : nat64;
        max_message_size_bytes : opt nat64;
        cycles_for_archive_creation : opt nat64;
        node_max_memory_size_bytes : opt nat64;
        controller_id : principal;
    };
};

service : (InitArgs) -> {
    icrc1_name : () -> (text) query;
    icrc1_symbol : () -> (text) query;
    icrc1_decimals : () -> (nat32) query;
    icrc1_metadata : () -> (vec record { text; Value }) query;
    icrc1_totalSupply : () -> (Tokens) query;

    icrc1_balanceOf : (Account) -> (Tokens) query;
    icrc1_transfer : (TransferArg) -> (TransferResult);
}
